{"version":3,"sources":["app/hooks.ts","reduxSlices/SurveySlice.ts","pages/Survey/index.tsx","pages/Admin/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","surveySlice","createSlice","name","initialState","reducers","save","state","action","push","payload","saveSurvey","console","log","actions","Survey","survey","SurveyApp","dispatch","surveyState","uploadFileInput","useRef","useState","finalSurvey","setFinalSurvey","loading","setLoading","showSummary","setShowSummary","inputHandler","e","objectQuestion","childActive","value","target","objectUpdated","isExistingObject","length","find","obj","title","isMultiSelect","typeField","newArray","filter","answer","templateQuestion","index","children","templates","TextField","id","fullWidth","margin","variant","label","onChange","InputLabel","htmlFor","Button","component","hidden","ref","type","current","map","indexChild","titleChild","FormGroup","FormControlLabel","control","Checkbox","question","checked","indexQuestion","findIndex","arrayFinalSurvey","inputHandlerCheckbox","useEffect","className","Typography","align","Container","sx","mb","mt","onClick","sv","ch","resumeSurvey","renderQuestions","setTimeout","Alert","severity","Admin","newChildName","setNewChildName","typeQuestionSelected","setTypeQuestionSelected","typeQuestionObject","setTypeQuestionObject","AddButton","IconButton","aria-label","size","addChild","fontSize","inputHandlerFields","fieldUpdated","removeChild","parent","child","typeQuestionObjectUpdated","FormControl","FormLabel","RadioGroup","defaultValue","Radio","Object","keys","options","template","color","pink","InputProps","endAdornment","Box","List","disablePadding","ListItem","py","px","ListItemText","primary","secondary","App","theme","createTheme","ThemeProvider","CssBaseline","AppBar","position","elevation","borderBottom","t","palette","divider","Toolbar","noWrap","maxWidth","Paper","my","xs","md","p","path","exact","persistConfig","key","storage","combineReducers","surveyReducer","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","middleware","thunk","Boolean","window","location","hostname","match","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b208519b.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\nimport { Options } from '../types/Survey';\n\nconst initialState: Array<Options> = [];\n\nexport const surveySlice = createSlice({\n  name: 'survey',\n  initialState,\n  reducers: {\n    save: (state, action: PayloadAction<Options>) => {\n      state.push(action.payload);\n    },\n    saveSurvey: (state, action: PayloadAction<Array<Options>>) => {\n      console.log('payload: ', action.payload);\n    }\n  },\n});\n\nexport const { save, saveSurvey } = surveySlice.actions;\n\nexport const Survey = (state: RootState) => state.survey;\n\nexport default surveySlice.reducer;","import { ChangeEvent, useEffect, useRef, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport './styles.scss';\nimport { Survey, saveSurvey } from '../../reduxSlices/SurveySlice';\nimport { Options, Child } from '../../types/Survey';\n\n// Material UI\nimport { Button, InputLabel, Modal, Alert } from '@mui/material';\nimport { Typography, Container, TextField, Checkbox, FormGroup, FormControlLabel} from '@mui/material';\n\nconst SurveyApp = () => {\n  const dispatch = useAppDispatch();\n  const surveyState: any = useAppSelector(Survey);\n\n  const uploadFileInput: any = useRef(null);\n  const [finalSurvey, setFinalSurvey] = useState<Array<Options>>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [showSummary, setShowSummary] = useState<boolean>(false);\n\n  //Modal\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const materialModalStyle = {\n    position: 'absolute' as 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,    \n  };\n\n  const getQuestions = () => {\n    setFinalSurvey(surveyState);\n    setLoading(false);\n  };\n\n  const renderQuestions = () => {\n    if (!finalSurvey || finalSurvey && !finalSurvey.length) return\n\n    return finalSurvey.map((sv: any, index: number) => {\n      return templateQuestion(sv, index);\n    })\n  }\n\n  const resumeSurvey = () => {\n    if (!finalSurvey) return\n    \n    return (\n      <ul>\n        {finalSurvey.map((sv: Options, index: number) => {\n          if (sv.typeField === 'checkbox') {\n            return (\n              <li key={index}>\n                <span>{sv.title}</span>\n                <ul className=\"sublist\">{sv.children!.map((ch: Child, index: number) => {\n                  return (\n                    <li key={index}>{ch.title}: {ch.checked === true ? 'Yes' : 'No'}</li>\n                  )\n                })}\n                </ul>\n              </li>\n            )\n          }\n\n          return (\n            <li key={index}>\n              <span>{sv.title}</span>\n              <span>{sv.answer}</span>\n            </li>\n          )\n        })}\n      </ul>\n    );\n  }\n\n  const send = () => {\n    dispatch(saveSurvey(finalSurvey));\n\n    setTimeout(() => {\n      setShowSummary(true);\n    }, 2000);\n  }\n\n\n  const inputHandler = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, objectQuestion: Options, childActive?: number) => {\n    const { value } = e.target;\n\n    let objectUpdated = objectQuestion;\n    let isExistingObject = finalSurvey && finalSurvey.length ? finalSurvey.find((obj) => obj.title === objectQuestion.title) : false;\n    let isMultiSelect = objectQuestion.typeField === 'checkbox';\n\n    if (!isExistingObject) {\n      if (!isMultiSelect) {\n        objectUpdated[\"answer\"] = value;\n        setFinalSurvey([...finalSurvey, objectUpdated]);  // Array push\n        return\n      }\n    }\n\n    objectUpdated[\"answer\"] = value;\n\n    let newArray: any = finalSurvey.filter((obj) => {\n      if (obj.title === objectUpdated.title) obj.answer = value;\n      return obj;\n    });\n\n    newArray && setFinalSurvey(newArray);\n  }\n\n  const inputHandlerCheckbox = (e: ChangeEvent<HTMLInputElement>, question: Options, childActive: number) => {\n    const { checked } = e.target;\n\n    let indexQuestion = finalSurvey.findIndex((survey: any) => survey.title === question.title);\n\n    let arrayFinalSurvey: Array<Options> = finalSurvey;\n    arrayFinalSurvey[indexQuestion].children![childActive].checked = checked;\n\n    setFinalSurvey([...arrayFinalSurvey]);\n  }\n\n  const templateQuestion = ({ name, title, typeField, children, answer }: Options, index: number) => {\n    const templates: any = {\n      \"text\": () => (\n        <div key={index}>\n          <TextField \n            id={`answer_${index}`}\n            fullWidth\n            margin=\"normal\" \n            variant=\"filled\" \n            name={`question_${index}`}\n            label={title} \n            value={answer} \n            onChange={(e) => inputHandler(e, { name, title, typeField, children, answer })} \n          />\n        </div>\n      ),\n      \"file\": () => (\n        <div key={index}>\n          <InputLabel htmlFor={`answer_${index}`}>{title}</InputLabel>\n          <Button\n            variant=\"outlined\"\n            component=\"label\"\n          >\n            Upload File\n            <input hidden ref={uploadFileInput} id={`answer_${index}`} type={typeField} name={`question_${index}`} value={answer} onChange={(e) => inputHandler(e, { name, title, typeField, children, answer })} />\n          </Button>\n          {uploadFileInput && uploadFileInput.current && uploadFileInput.current?.value}\n        </div>\n      ),\n      \"checkbox\": () => (\n        <div key={index}>\n          <InputLabel htmlFor={`answer_${index}`}>{title}</InputLabel>\n          {children && children.map(({ title: titleChild }: Child, indexChild) => (\n            <FormGroup key={index}>\n              <FormControlLabel \n                control={\n                  <Checkbox \n                    id={`answer_${index}-${indexChild}`}\n                    onChange={(e) => inputHandlerCheckbox(e, { name, title, typeField, children, answer }, indexChild)} />\n                } \n                label={titleChild} />\n            </FormGroup>\n          ))}\n        </div>\n      )\n    }\n\n    return typeField && templates[typeField] && templates[typeField]();\n  };\n\n  useEffect(() => {\n    getQuestions();\n  }, []);\n\n  return (\n    loading ? <div>Loading...</div> :\n      <div className=\"survey\">\n        <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n          Lockebio Survey\n        </Typography>\n\n        <Container sx={{ mb: 4, mt: 4 }}>\n        </Container>\n        {showSummary ?\n          <div className=\"survey__modal\" onClick={() => setShowSummary(false)}>\n            {resumeSurvey()}\n          </div>\n          : null\n        }\n        <div className=\"survey__list\">\n          {renderQuestions()}\n        </div>\n        {finalSurvey && finalSurvey.length ? <Button variant=\"contained\" onClick={send}>Resume Survey</Button> : \n          <Alert severity=\"info\">Sorry, there are no surveys available yet!</Alert>\n        }\n      </div>\n  )\n}\n\nexport default SurveyApp;","import { ChangeEvent, useState } from 'react';\nimport { Child, Options } from '../../types/Survey';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Survey, save } from '../../reduxSlices/SurveySlice';\nimport { Button, List, ListItem, ListItemText, Typography } from '@mui/material';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport IconButton from '@mui/material/IconButton';\nimport AddIcon from '@mui/icons-material/Add';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport FormGroup from '@mui/material/FormGroup';\nimport Checkbox from '@mui/material/Checkbox';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport { pink } from '@mui/material/colors';\n\nimport './styles.scss';\n\nconst Admin = () => {\n  const [newChildName, setNewChildName] = useState<string>('');\n  const [typeQuestionSelected, setTypeQuestionSelected] = useState<string>('');\n  const [typeQuestionObject, setTypeQuestionObject] = useState<Options>({ title: '', name: '', typeField: '', children: [], answer: '' });\n\n  const dispatch = useAppDispatch();\n  const surveyState = useAppSelector(Survey);\n\n  const AddButton = () => (\n    <IconButton aria-label=\"Add\" size=\"small\" onClick={() => addChild('checkbox', newChildName)}> \n      <AddIcon fontSize=\"small\" />\n    </IconButton>\n  )\n\n  const templateQuestion = (options: Options) => {\n    const { title, children } = options;\n\n    const template: any = {\n      'text': () => (\n          <TextField fullWidth margin=\"normal\" variant=\"outlined\" name=\"title\" label=\"Type the question here for text\" value={title} onChange={inputHandlerFields}  />\n      ),\n      'file': () => (\n          <TextField fullWidth margin=\"normal\" variant=\"outlined\" name=\"title\" label=\"Type the question here for upload\" value={title} onChange={inputHandlerFields}  />\n      ),\n      'checkbox': () => (\n        <div className=\"question question--checkbox\">\n          <TextField fullWidth margin=\"normal\" variant=\"outlined\" name=\"title\" label=\"Type the question here for checkbox\" value={title} onChange={inputHandlerFields}  />\n                    \n          {children && children.map((child: Child, index: number) => (\n            <FormGroup key={index}>\n                <FormControlLabel \n                  control={\n                    <Checkbox value={child!.title} onChange={inputHandler}  />\n                  } \n                  label={\n                      <>\n                      {child!.title}\n                      <IconButton aria-label=\"Remove\" size=\"small\" onClick={() => removeChild('checkbox', child)}> \n                        <HighlightOffIcon sx={{ color: pink[500] }} fontSize=\"small\" />\n                      </IconButton>\n                      </>\n                  } />\n            </FormGroup>\n          ))}\n          <div className=\"question__childadd\">\n            <TextField \n              margin=\"dense\" \n              size=\"small\" \n              variant=\"outlined\" \n              name=\"title\" \n              label=\"Type the option label\"\n              InputProps={{endAdornment: <AddButton />}}\n              onChange={(e) => setNewChildName(e.target.value)}  \n            />\n          </div>\n        </div>\n      )\n    };\n\n    return typeQuestionSelected ? template[typeQuestionSelected] && template[typeQuestionSelected]() : null;\n  }\n\n  const renderQuestionSelected = () => {\n    if (!Object.keys(typeQuestionObject).length) return <div>No Question Selected.</div>\n\n    return templateQuestion(typeQuestionObject);\n  }\n\n  const inputHandlerFields = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    const fieldUpdated: any = {};\n    fieldUpdated[name] = value;\n\n    setTypeQuestionObject({ ...typeQuestionObject, ...fieldUpdated });\n  }\n\n  const inputHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    if (!name) return\n\n    setTypeQuestionObject({\n      title: '',\n      name,\n      answer: '',\n      typeField: value,\n      children: []\n    });\n\n    setTypeQuestionSelected(value);\n  }\n\n  const removeChild = (parent: string, child: Child) => {\n    if (!typeQuestionObject || typeQuestionObject && !typeQuestionObject.children) return\n\n    let typeQuestionObjectUpdated = typeQuestionObject.children!.filter((ch) => {\n      return ch != child;\n    });\n\n    setTypeQuestionObject({ ...typeQuestionObject, children: typeQuestionObjectUpdated });\n  }\n\n  const addChild = (parent: string, titleChild: string) => {\n    setTypeQuestionObject({ ...typeQuestionObject, children: [...typeQuestionObject.children!, { title: `${titleChild}`, checked: false }] });\n  }\n\n  const saveSurvey = () => {\n    if (!typeQuestionObject) return\n\n    dispatch(save(typeQuestionObject));\n  }\n\n  return (\n    <div className=\"admin\">\n      <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n        Admin\n      </Typography>\n      <Typography component=\"h5\"  align=\"center\">Create your survey</Typography>\n\n      <Container sx={{ mb: 4, mt: 4 }}>\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">Choose the type of your question</FormLabel>\n          <RadioGroup\n            aria-label=\"gender\"\n            defaultValue=\"female\"\n            name=\"radio-buttons-group\"\n          >\n            <FormControlLabel id=\"text\" control={<Radio name=\"typequestion\" value=\"text\" onChange={inputHandler} />} label=\"Text\"  />\n            <FormControlLabel id=\"upload\" control={<Radio name=\"typequestion\" value=\"file\" onChange={inputHandler} />} label=\"Upload\" />\n            <FormControlLabel id=\"checkbox\" control={<Radio name=\"typequestion\" value=\"checkbox\" onChange={inputHandler} />} label=\"Checkbox\" />\n          </RadioGroup>\n        </FormControl>\n      \n        {renderQuestionSelected()}\n\n        <Box sx={{ mb: 2, mt: 2 }}>\n         <Button variant=\"contained\" onClick={saveSurvey}>Save</Button>\n        </Box>\n      </Container>\n      \n      {surveyState.length ? \n        <Container>\n          <hr />\n          <Typography component=\"h2\" variant=\"h5\" align=\"center\">\n            Questions saved\n          </Typography>\n          <List disablePadding>\n            {surveyState.map(({ title, typeField, children }: Options, index: number) => (\n              <ListItem key={index} sx={{ py: 1, px: 0 }}>\n                <ListItemText \n                  primary={`Question ${index+1}: ${title}`} \n                  secondary={`Answer type: ${typeField}`} />\n                <ul>\n                {\n                  children && children?.map(({ title }: Child, index: number) => (\n                      <li key={index}>{`option ${index+1}: ${title}`}</li> \n                    )\n                  )\n                }\n                </ul>\n              </ListItem>\n            ))}\n          </List>\n        </Container>\n        : null\n      } \n    </div>\n  )\n}\n\nexport default Admin;","import React from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport Container from '@mui/material/Container';\nimport Toolbar from '@mui/material/Toolbar';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport Survey from './pages/Survey';\nimport Admin from './pages/Admin';\n\nfunction App() {\n  const theme = createTheme();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar\n        position=\"absolute\"\n        color=\"default\"\n        elevation={0}\n        sx={{\n          position: 'relative',\n          borderBottom: (t) => `1px solid ${t.palette.divider}`,\n        }}\n      >\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Lockebio Assessment\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container component=\"main\" maxWidth=\"sm\" sx={{ mb: 4 }}>\n        <Paper variant=\"outlined\" sx={{ my: { xs: 3, md: 6 }, p: { xs: 2, md: 3 } }}>\n          <Router>\n            <Switch>\n              <Route path=\"/\" exact={true} component={Survey}></Route>\n              <Route path=\"/admin\" exact={true} component={Admin}></Route>\n            </Switch>\n          </Router>\n        </Paper>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport surveyReducer from '../reduxSlices/SurveySlice';\n\nimport { persistReducer } from \"redux-persist\";\nimport { combineReducers } from 'redux';\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from 'redux-thunk';\n\nconst persistConfig = {\n  key: 'root',\n  storage\n};\n\nconst reducers = combineReducers({\n  survey: surveyReducer\n});\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  devTools: process.env.NODE_ENV !== 'production',\n  middleware: [thunk]\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { persistStore } from \"redux-persist\";\n\nconst persistor = persistStore(store);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}